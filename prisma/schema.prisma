// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // MFA fields
  mfaEnabled      Boolean   @default(false)
  mfaSecret       String?   // Encrypted TOTP secret
  mfaBackupCodes  String[]  // Encrypted backup codes
  mfaEnforcedAt   DateTime? // When MFA was enforced

  // Account security
  failedLoginAttempts Int      @default(0)
  lockedUntil         DateTime?
  lastLoginAt         DateTime?
  lastLoginIp         String?
  passwordChangedAt   DateTime?
  passwordHash        String?   // For users with password auth

  accounts       Account[]
  sessions       Session[]
  searchHistory  SearchHistory[]
  auditLogs      AuditLog[]
  mfaRecovery    MFARecovery[]
  loginAttempts  LoginAttempt[]
  savedSearches  SavedSearch[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model SearchHistory {
  id         String       @id @default(cuid())
  userId     String
  searchType SearchType
  query      Json
  results    Json?
  createdAt  DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([resource, resourceId])
}

// MFA Recovery model for tracking recovery attempts
model MFARecovery {
  id         String   @id @default(cuid())
  userId     String
  code       String   // Recovery code used
  usedAt     DateTime @default(now())
  ipAddress  String?
  userAgent  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Login attempt tracking
model LoginAttempt {
  id         String   @id @default(cuid())
  userId     String?
  email      String
  success    Boolean
  ipAddress  String?
  userAgent  String?
  reason     String?  // Failure reason
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([email, createdAt])
  @@index([userId, createdAt])
}

// Saved searches for advanced search functionality
model SavedSearch {
  id           String   @id @default(cuid())
  userId       String
  name         String
  description  String?
  searchParams Json     // Stores the complete search parameters
  useCount     Int      @default(0)
  lastUsed     DateTime?
  isTemplate   Boolean  @default(false) // System-provided templates
  isPublic     Boolean  @default(false) // Shared with team
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([isTemplate, isPublic])
  @@unique([userId, name])
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPPORT
  TECHNICAL_SUPPORT
}

enum SearchType {
  EMAIL
  NAME
  BUSINESS_NAME
  DWOLLA_ID
  COMBINED
}

// HubSpot List tracking models
model ListSnapshot {
  id           String   @id @default(cuid())
  listId       Int
  listName     String
  listType     String   // STATIC or DYNAMIC
  memberCount  Int
  snapshotDate DateTime @default(now())
  createdAt    DateTime @default(now())
  
  @@unique([listId, snapshotDate])
  @@index([listId])
  @@index([snapshotDate])
}

model ListMetadata {
  id                String   @id @default(cuid())
  listId            Int      @unique
  listName          String
  listType          String
  internalName      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastSnapshotDate  DateTime?
  isActive          Boolean  @default(true)
  
  @@index([listId])
}

// ACH Transaction tracking model
model ACHTransaction {
  id                String    @id @default(cuid())
  dwollaId          String    @unique
  status            String    // pending, processing, processed, failed, cancelled, returned
  amount            Decimal   @db.Decimal(15,2)
  currency          String    @default("USD")
  direction         String    // credit or debit
  created           DateTime
  lastUpdated       DateTime  @updatedAt
  
  // Source information
  sourceId          String?
  sourceName        String?
  sourceBankName    String?
  
  // Destination information
  destinationId     String?
  destinationName   String?
  destinationBankName String?
  bankLastFour      String?
  
  // Transaction identifiers
  correlationId     String?
  individualAchId   String?
  
  // Customer information
  customerId        String?
  customerName      String?
  customerEmail     String?
  companyName       String?
  
  // Transaction details
  invoiceNumber     String?
  transactionType   String?   // invoice, refund, adjustment, etc.
  description       String?
  
  // Financial details
  fees              Decimal?  @db.Decimal(15,2)
  netAmount         Decimal?  @db.Decimal(15,2)
  
  // Processing information
  clearingDate      DateTime?
  processedAt       DateTime?
  failureReason     String?   @db.Text
  failureCode       String?
  returnCode        String?
  
  // Webhook tracking
  failureDetails    Json?     @default("{}")
  webhookEvents     Json?     @default("[]")
  lastWebhookAt     DateTime?
  
  // Metadata
  metadata          Json?
  
  // Audit fields
  createdAt         DateTime  @default(now())
  
  @@index([status])
  @@index([created])
  @@index([customerName])
  @@index([dwollaId])
  @@index([correlationId])
  @@index([customerEmail])
  @@index([companyName])
  @@index([direction])
  @@index([amount])
  @@index([failureCode])
  @@index([returnCode])
  @@index([lastWebhookAt])
}
