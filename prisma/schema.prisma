// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // MFA fields
  mfaEnabled      Boolean   @default(false)
  mfaSecret       String?   // Encrypted TOTP secret
  mfaBackupCodes  String[]  // Encrypted backup codes
  mfaEnforcedAt   DateTime? // When MFA was enforced

  // Account security
  failedLoginAttempts Int      @default(0)
  lockedUntil         DateTime?
  lastLoginAt         DateTime?
  lastLoginIp         String?
  passwordChangedAt   DateTime?

  accounts       Account[]
  sessions       Session[]
  searchHistory  SearchHistory[]
  auditLogs      AuditLog[]
  mfaRecovery    MFARecovery[]
  loginAttempts  LoginAttempt[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model SearchHistory {
  id         String       @id @default(cuid())
  userId     String
  searchType SearchType
  query      Json
  results    Json?
  createdAt  DateTime     @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([resource, resourceId])
}

// MFA Recovery model for tracking recovery attempts
model MFARecovery {
  id         String   @id @default(cuid())
  userId     String
  code       String   // Recovery code used
  usedAt     DateTime @default(now())
  ipAddress  String?
  userAgent  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Login attempt tracking
model LoginAttempt {
  id         String   @id @default(cuid())
  userId     String?
  email      String
  success    Boolean
  ipAddress  String?
  userAgent  String?
  reason     String?  // Failure reason
  createdAt  DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([email, createdAt])
  @@index([userId, createdAt])
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPPORT
  TECHNICAL_SUPPORT
}

enum SearchType {
  EMAIL
  NAME
  BUSINESS_NAME
  DWOLLA_ID
  COMBINED
}
