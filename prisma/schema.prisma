generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String?         @unique
  emailVerified       DateTime?
  image               String?
  role                UserRole        @default(USER)
  isActive            Boolean         @default(true)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  mfaEnabled          Boolean         @default(false)
  mfaSecret           String?
  mfaBackupCodes      String[]
  mfaEnforcedAt       DateTime?
  failedLoginAttempts Int             @default(0)
  lockedUntil         DateTime?
  lastLoginAt         DateTime?
  lastLoginIp         String?
  passwordChangedAt   DateTime?
  passwordHash        String?
  accounts            Account[]
  auditLogs           AuditLog[]
  loginAttempts       LoginAttempt[]
  mfaRecovery         MFARecovery[]
  savedSearches       SavedSearch[]
  searchHistory       SearchHistory[]
  sessions            Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SearchHistory {
  id         String     @id @default(cuid())
  userId     String
  searchType SearchType
  query      Json
  results    Json?
  createdAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  metadata   Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([resource, resourceId])
}

model MFARecovery {
  id        String   @id @default(cuid())
  userId    String
  code      String
  usedAt    DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model LoginAttempt {
  id        String   @id @default(cuid())
  userId    String?
  email     String
  success   Boolean
  ipAddress String?
  userAgent String?
  reason    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([email, createdAt])
  @@index([userId, createdAt])
}

model SavedSearch {
  id           String    @id @default(cuid())
  userId       String
  name         String
  description  String?
  searchParams Json
  useCount     Int       @default(0)
  lastUsed     DateTime?
  isTemplate   Boolean   @default(false)
  isPublic     Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId, createdAt])
  @@index([isTemplate, isPublic])
}

model ListSnapshot {
  id           String   @id @default(cuid())
  listId       Int
  listName     String
  listType     String
  memberCount  Int
  snapshotDate DateTime @default(now())
  createdAt    DateTime @default(now())

  @@unique([listId, snapshotDate])
  @@index([listId])
  @@index([snapshotDate])
}

model ListMetadata {
  id               String    @id @default(cuid())
  listId           Int       @unique
  listName         String
  listType         String
  internalName     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastSnapshotDate DateTime?
  isActive         Boolean   @default(true)

  @@index([listId])
}

model ACHTransaction {
  id                  String    @id @default(cuid())
  dwollaId            String    @unique
  status              String
  amount              Decimal   @db.Decimal(15, 2)
  currency            String    @default("USD")
  direction           String
  created             DateTime
  lastUpdated         DateTime  @updatedAt
  sourceId            String?
  sourceName          String?
  sourceBankName      String?
  destinationId       String?
  destinationName     String?
  destinationBankName String?
  bankLastFour        String?
  correlationId       String?
  individualAchId     String?
  customerId          String?
  customerName        String?
  customerEmail       String?
  companyName         String?
  invoiceNumber       String?
  transactionType     String?
  description         String?
  fees                Decimal?  @db.Decimal(15, 2)
  netAmount           Decimal?  @db.Decimal(15, 2)
  clearingDate        DateTime?
  processedAt         DateTime?
  failureReason       String?
  failureCode         String?
  returnCode          String?
  metadata            Json?
  createdAt           DateTime  @default(now())
  failureDetails      Json?     @default("{}")
  lastWebhookAt       DateTime?
  webhookEvents       Json?     @default("[]")

  @@index([status])
  @@index([created])
  @@index([customerName])
  @@index([dwollaId])
  @@index([correlationId])
  @@index([customerEmail])
  @@index([companyName])
  @@index([direction])
  @@index([amount])
  @@index([failureCode])
  @@index([returnCode])
  @@index([lastWebhookAt])
}

model WebhookEvent {
  id                   String                 @id @default(cuid())
  provider             String                 @default("dwolla")
  eventId              String                 @unique
  eventType            String
  resourceId           String?
  resourceType         String?
  resourceUri          String?
  topic                String
  eventTimestamp       DateTime
  receivedAt           DateTime               @default(now())
  processedAt          DateTime?
  headers              Json                   @default("{}")
  payload              Json
  payloadSize          Int                    @default(0)
  signature            String?
  signatureValid       Boolean                @default(false)
  verificationMethod   String?
  sourceIp             String?
  processingState      WebhookEventState      @default(received)
  processingAttempts   Int                    @default(0)
  lastProcessingError  String?
  processingDurationMs Int?
  isDuplicate          Boolean                @default(false)
  originalEventId      String?
  duplicateCount       Int                    @default(0)
  eventSequence        BigInt?
  isOutOfOrder         Boolean                @default(false)
  expectedSequence     BigInt?
  source               String                 @default("webhook")
  recoveryMetadata     Json?
  schemaVersion        String?
  validationStatus     ValidationStatus       @default(valid)
  validationErrors     Json?
  quarantined          Boolean                @default(false)
  quarantineReason     String?
  quarantinedAt        DateTime?
  quarantineReviewedAt DateTime?
  quarantineReviewedBy String?
  partitionKey         String
  ttl                  Int?
  archived             Boolean                @default(false)
  archivedAt           DateTime?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  journeyStarts        JourneyInstance[]      @relation("StartEvent")
  journeySteps         JourneyStep[]
  relations            WebhookEventRelation[]
  anomalies            WebhookAnomaly[]       @relation("AnomalyToEvents")

  @@index([eventType])
  @@index([resourceId])
  @@index([resourceType])
  @@index([eventTimestamp])
  @@index([processingState])
  @@index([partitionKey])
  @@index([createdAt])
}

model WebhookEventRelation {
  id             String       @id @default(cuid())
  webhookEventId String
  relationType   String
  relationId     String
  relationTable  String
  metadata       Json?
  createdAt      DateTime     @default(now())
  webhookEvent   WebhookEvent @relation(fields: [webhookEventId], references: [id], onDelete: Cascade)

  @@index([webhookEventId])
  @@index([relationId])
  @@index([relationType])
}

model EventJourneyDefinition {
  id          String             @id @default(cuid())
  name        String
  description String?
  category    String
  config      Json
  thresholds  Json?
  version     Int                @default(1)
  active      Boolean            @default(true)
  tags        String[]
  createdBy   String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  analytics   JourneyAnalytics[]
  instances   JourneyInstance[]

  @@index([category])
  @@index([active])
}

model JourneyInstance {
  id                      String                 @id @default(cuid())
  definitionId            String
  definitionVersion       Int
  resourceId              String
  resourceType            String
  resourceMetadata        Json?
  status                  JourneyStatus          @default(active)
  currentStepIndex        Int                    @default(0)
  completedSteps          String[]
  skippedSteps            String[]
  startEventId            String
  startTime               DateTime
  endEventId              String?
  endTime                 DateTime?
  lastEventTime           DateTime
  totalDurationMs         BigInt?
  businessDurationMs      BigInt?
  progressPercentage      Int                    @default(0)
  estimatedCompletionTime DateTime?
  confidenceScore         Int?
  riskScore               Int?
  riskFactors             String[]
  isOutlier               Boolean                @default(false)
  outlierReasons          String[]
  context                 Json?
  tags                    String[]
  notes                   String?
  partitionKey            String
  version                 Int                    @default(1)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  definition              EventJourneyDefinition @relation(fields: [definitionId], references: [id])
  startEvent              WebhookEvent           @relation("StartEvent", fields: [startEventId], references: [id])
  steps                   JourneyStep[]

  @@index([definitionId])
  @@index([resourceId])
  @@index([status])
  @@index([startTime])
  @@index([partitionKey])
}

model JourneyStep {
  id                     String          @id @default(cuid())
  journeyInstanceId      String
  sequence               Int
  stepName               String
  eventId                String
  eventType              String
  timestamp              DateTime
  durationFromStartMs    BigInt
  durationFromPreviousMs BigInt?
  expected               Boolean         @default(true)
  onTime                 Boolean         @default(true)
  retryCount             Int             @default(0)
  eventMetadata          Json?
  createdAt              DateTime        @default(now())
  event                  WebhookEvent    @relation(fields: [eventId], references: [id])
  journeyInstance        JourneyInstance @relation(fields: [journeyInstanceId], references: [id], onDelete: Cascade)

  @@index([journeyInstanceId])
  @@index([eventId])
}

model RealTimeMetrics {
  id          String   @id @default(cuid())
  timestamp   DateTime
  window      String
  volume      Json
  performance Json
  journeys    Json
  health      Json
  resources   Json
  createdAt   DateTime @default(now())

  @@index([timestamp])
  @@index([window])
}

model JourneyAnalytics {
  id           String                 @id @default(cuid())
  definitionId String
  period       DateTime
  periodType   String
  metrics      Json
  segments     Json?
  outliers     Json?
  predictions  Json?
  createdAt    DateTime               @default(now())
  definition   EventJourneyDefinition @relation(fields: [definitionId], references: [id])

  @@index([definitionId])
  @@index([period])
  @@index([periodType])
}

model AlertRule {
  id              String          @id @default(cuid())
  name            String
  description     String?
  category        String
  enabled         Boolean         @default(true)
  priority        String
  condition       Json
  actions         Json
  suppression     Json
  tags            String[]
  owner           String
  runbook         String?
  documentation   String?
  createdBy       String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  lastTriggeredAt DateTime?
  triggerCount    Int             @default(0)
  instances       AlertInstance[]

  @@index([category])
  @@index([enabled])
}

model AlertInstance {
  id                String      @id @default(cuid())
  ruleId            String
  ruleName          String
  status            AlertStatus @default(active)
  severity          String
  triggeredAt       DateTime
  acknowledgedAt    DateTime?
  investigatingAt   DateTime?
  resolvedAt        DateTime?
  duration          BigInt?
  triggerContext    Json
  actionsTaken      Json?
  escalationLevel   Int         @default(0)
  resolution        Json?
  parentAlertId     String?
  childAlertIds     String[]
  relatedIncidentId String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  rule              AlertRule   @relation(fields: [ruleId], references: [id])

  @@index([ruleId])
  @@index([status])
  @@index([triggeredAt])
}

model SystemHealth {
  id            String   @id @default(cuid())
  timestamp     DateTime
  components    Json
  overallStatus String
  activeIssues  Json?
  metrics       Json
  capacity      Json
  createdAt     DateTime @default(now())

  @@index([timestamp])
  @@index([overallStatus])
}

model ReconciliationJob {
  id          String    @id @default(cuid())
  type        String
  config      Json
  status      String    @default("pending")
  startedAt   DateTime?
  completedAt DateTime?
  results     Json?
  errors      Json?
  createdBy   String
  createdAt   DateTime  @default(now())

  @@index([type])
  @@index([status])
  @@index([createdAt])
}

enum UserRole {
  USER
  ADMIN
  SUPPORT
  TECHNICAL_SUPPORT
}

enum SearchType {
  EMAIL
  NAME
  BUSINESS_NAME
  DWOLLA_ID
  COMBINED
}

enum WebhookEventState {
  received
  queued
  processing
  completed
  failed
  quarantined
}

enum ValidationStatus {
  valid
  invalid
  warning
}

enum JourneyStatus {
  active
  completed
  failed
  abandoned
  stuck
  rolled_back
}

enum AlertStatus {
  active
  acknowledged
  investigating
  resolved
  suppressed
}

enum ReconciliationSessionStatus {
  draft
  in_review
  finalized
  exported
  cancelled
}

// Missing model for reconciliation checks
model ReconciliationCheck {
  id                String              @id @default(cuid())
  checkType         String
  status            ReconciliationStatus @default(pending)
  recordCount       Int
  discrepancyCount  Int                 @default(0)
  startTime         DateTime            @default(now())
  endTime           DateTime?
  metadata          Json?
  resolvedBy        String?             // 'system' or user ID
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  discrepancies     ReconciliationDiscrepancy[]
  
  @@index([status])
  @@index([checkType])
  @@index([createdAt])
}

model ReconciliationDiscrepancy {
  id            String   @id @default(cuid())
  checkId       String
  resourceId    String
  resourceType  String
  field         String
  dwollaValue   String?
  localValue    String?
  resolved      Boolean  @default(false)
  resolvedAt    DateTime?
  resolvedBy    String?
  notes         String?
  createdAt     DateTime @default(now())
  
  check         ReconciliationCheck @relation(fields: [checkId], references: [id])
  
  @@index([checkId])
  @@index([resolved])
}

enum ReconciliationStatus {
  pending
  in_progress
  completed
  failed
  resolved
}

// Missing model for webhook anomalies
model WebhookAnomaly {
  id                  String              @id @default(cuid())
  anomalyType         String
  severity            AnomalySeverity
  status              AnomalyStatus       @default(active)
  description         String
  detectedAt          DateTime            @default(now())
  resolvedAt          DateTime?
  confidence          Float               @default(0.5)
  affectedEventCount  Int                 @default(0)
  metadata            Json?
  
  affectedEvents      WebhookEvent[]      @relation("AnomalyToEvents")
  
  @@index([status])
  @@index([severity])
  @@index([detectedAt])
}

// Carrier mapping for reconciliation
model CarrierMapping {
  id          String   @id @default(cuid())
  productName String   @unique
  productCode String?
  carrierName String
  carrierCode String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([productName])
  @@index([carrierName])
}

// Reconciliation session tracking
model ReconciliationSession {
  id            String                  @id @default(cuid())
  sessionNumber String                  @unique
  transferIds   String[]
  dateRangeStart DateTime?
  dateRangeEnd  DateTime?
  status        ReconciliationSessionStatus @default(draft)
  transferCount Int                     @default(0)
  policyCount   Int                     @default(0)
  totalAmount   Decimal                 @db.Decimal(15, 2)
  carrierTotals Json                    // {carrierName: amount, ...}
  policyDetails Json                    // Detailed policy breakdown
  notes         String?
  createdBy     String
  reviewedBy    String?
  reviewedAt    DateTime?
  finalizedBy   String?
  finalizedAt   DateTime?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  
  @@index([status])
  @@index([createdAt])
  @@index([sessionNumber])
}

enum AnomalySeverity {
  low
  medium
  high
  critical
}

enum AnomalyStatus {
  active
  investigating
  resolved
  false_positive
}

// Missing model for event metrics
model EventMetric {
  id            String   @id @default(cuid())
  metricName    String
  eventType     String?
  resourceType  String?
  value         Float
  timestamp     DateTime
  aggregation   String   // 'sum', 'avg', 'count', 'max', 'min'
  metadata      Json?
  createdAt     DateTime @default(now())
  
  @@index([metricName, timestamp])
  @@index([eventType])
  @@index([timestamp])
}

// Missing model for event anomalies (specific anomaly detections)
model EventAnomaly {
  id            String   @id @default(cuid())
  eventId       String
  anomalyType   String
  severity      String
  confidence    Float
  detectedAt    DateTime @default(now())
  resolved      Boolean  @default(false)
  resolvedAt    DateTime?
  metadata      Json?
  
  @@index([eventId])
  @@index([resolved])
  @@index([detectedAt])
}
